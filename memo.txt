■ Windowsでyarnが実行できない

・ポリシーを変更する必要がある
参考：https://labor.ewigleere.net/2020/06/04/yarn-powershell/

■ 途中から「yarn dev」するとエラーになる

・Node.jsのバージョンが高すぎる (16.20.1などを使用する)
・nvmを入れてバージョンの低いNode.jsを使用する

・「nvm list available」で使用可能なバージョンの一覧を表示
・「nvm install {version}」でNode.jsをインストール
・「nvm use {version}」でバージョンを切り替え

参考：https://qiita.com/akitkat/items/f455bbc088a408cbc3a5
参考：https://fumidzuki.com/knowledge/4533/

■ 15.Automatic types generation by codegen

・クエリを作成するときはHasuraからコピーしてくると便利
・@clientをつけるとクライアントサイドのキャッシュから実行してくれる
・型の「!」は必須の意味
・「yarn gen-types」でType型を生成（同じ名前のクエリが存在するとエラーになる）

■ 17. Layout component

■ 18. State management in Apollo Client

・StateManagement
　- REST API with Redux (useContext + useState)
　- GraphQL with Apollo Client

■ 19. makeVar + useReactiveVar

・cache.tsに管理したいstateの定義を記述
・Componentからcache.tsのstateを呼び出して、値の更新などを行う

■ 20. Integration of Nextjs/Apollo client with Hasura

・HasuraとNext.jsの連携をした
・連携の仕方は公式がサンプルを提供している
　→　githubのvercel/next.jsのnext.js/examples/with-apollo/lib/apolloClient.js
・SSGやSSRなどサーバサイド処理では必ず新規のApolloClientインスタンスを生成しなければならない
・types/generated/graphql.tsxのTypeには規則がある
　→　queryの末尾に「Query」をつけられるだけ
・ApolloClientのqueryは正規化される（キャッシュを取れるようにするため）

■ 21. Direct access to cache (@client)

・useQueryにfetchPolicyを指定することができ、キャッシュを使用しない設定にもできる
　→　fetchPolicy: 'network-only'
　→　これをない場合は、キャッシュがなければサーバサイドに、あればキャッシュを見に行く
・デベロッパーツールのNetworkにあるFetch/XHRからクエリの動きが確認できる
　→　graphql fetchはクライアントサイドからGraphQLにフェッチが行われたことを意味する

■ 22. Full understanding of fetch policy

・4つのフェッチポリシー
　- fetchPolicy: 'network-only：常にサーバサイドからデータ取得する（キャッシュは保存する）
　- fetchPolicy: 'cache-and-network'：サーバサイドからデータ取得するが、取得までの間はキャッシュを使用する
　- fetchPolicy: 'cache-first'：キャッシュがあれば使用する(デフォルト)
　- fetchPolicy: 'no-cache'：常にサーバサイドからデータ取得する（キャッシュに保存しない）

■ 23. CRUD(Hasura) cache.modify

・クエリがmutationの場合は、自動生成されたTypeの末尾にもMutationがつく
・createとdeleteは自動でキャッシュが更新されない (updateはapolloが自動で更新してくれる)
　→　自分で書く必要がある
・cache.identifyでキャッシュのIDが取得できる (apolloの機能)
・

■ 24. CRUD(Hasura) memo

・再レンダリングが行われるのは、
　- stateが更新されたとき
　- propsが更新されたとき
　- 親コンポーネントが再レンダリングされたとき
・メモ化することで同じpropsが渡されたときに再レンダリングしないようにできる

■ 26. SSG + ISR with Apollo client

・SSG/ISRの確認をするときはyarn buildからのyarn startをする
・yarn build時に型周りでエラーが出る
　→　['input']をすべて削除したら通った
・デベロッパーツールの歯車から、DebuggerのDisable JavaScriptにチェックを入れると、JSを無効にできる
・SSGはyarn build時にデータを取得して、静的なHTMLとして埋め込むことを指しているっぽい？
・GetStaticPathsのreturn時にfallbackをtrueにしておくとCRUDでデータが変更されたときに、動的にページの作成も行ってくれる (ISR)

【Incremental Static Regeneration】
・通常、yarn buildで生成されたHTMLを受け取る
・ISRを使用しておくとデータが更新されたときにHTMLも再生成される

■ 27. Custom Hook + useCallback + memo

・memo化してても、異なるpropsが渡されたら再レンダリングされてしまう
・useCallbackを使用すると関数を再利用してくれる
　→　第2引数に依存関係を指定することができ、その値が変更されたら関数も再生成される
・カスタムフックで使用する関数は基本的にuseCallbackを使用するのが推奨されている！！！！！

■ 28. ReferenceError: setImmediate is not defined 対処法

1. ReferenceError: document is not defined

各テストファイルの先頭に下記3行を追加

/**
* @jest-environment jsdom
*/

2. ReferenceError: setImmediate is not defined

「yarn add setimmediate」を実行するか、
各テストファイルのimport部に下記を追加

import 'setimmediate'

■ 29. NavBar Test FAIL

エラーが出た場合は下記を変更

expect(await screen.findByText('makeVar')).toBeInTheDocument()
↓
expect(screen.getByText('makeVar')).toBeInTheDocument()

■ 30. Test code of navigation + useQuery

・getByTestIdでテストIDの要素を取得できる
・findByTextで指定したテキストが書かれた要素を取得できる
・userEvent.clickで要素をクリックすることができる

■ 31. Test code of CRUD + SSG pages

・いろんなテストを書いた

■ 32. Protection of Hasura endpoint

・Hasuraのエンドポイントはデフォルトだと誰でもアクセスできて保護されていない状態
・プロテクトする方法は2つ
　- JWTトークンを使って認証をかける方法
　- Hasura admin secretというシークレットキーを設定する方法（講座ではこっち！）

1. HasuraのProject一覧の歯車マークをクリック
2. Env varsタグをクリックし、New Env varsタグをクリック
3. HASURA_GRAPHQL_ADMIN_SECRETを選択
4. Valueに複雑なパスワードを作成して入力
5. Addをクリック

・HasuraのRequest Headersにx-hasura-admin-secretが追加される
・環境変数を作成してNext.jsで使えるようにする
・.env.localファイルを作成して、先ほど作成したパスワードを環境変数として登録
・lib/apolloClientファイルを修正して、ヘッダーにパスワードを含めるように変更する

■ 35. Deploy to Vercel

・VercelのProject Settings -> General -> Node.js Versionで 16.xを選択SaveしてからDeployするようにする
・jestのテストは環境変数を読み込んでくれない
　→　.env.test.localファイルを作成する
　→　それでもエラーが出る場合は、すべてのテストファイルで環境変数を定義する記述を追加する
