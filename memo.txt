■ Windowsでyarnが実行できない

・ポリシーを変更する必要がある
参考：https://labor.ewigleere.net/2020/06/04/yarn-powershell/

■ 途中から「yarn dev」するとエラーになる

・Node.jsのバージョンが高すぎる (16.20.1などを使用する)
・nvmを入れてバージョンの低いNode.jsを使用する

・「nvm list available」で使用可能なバージョンの一覧を表示
・「nvm install {version}」でNode.jsをインストール
・「nvm use {version}」でバージョンを切り替え

参考：https://qiita.com/akitkat/items/f455bbc088a408cbc3a5
参考：https://fumidzuki.com/knowledge/4533/

■ 15.Automatic types generation by codegen

・クエリを作成するときはHasuraからコピーしてくると便利
・@clientをつけるとクライアントサイドのキャッシュから実行してくれる
・型の「!」は必須の意味
・「yarn gen-types」でType型を生成（同じ名前のクエリが存在するとエラーになる）

■ 17. Layout component

■ 18. State management in Apollo Client

・StateManagement
　- REST API with Redux (useContext + useState)
　- GraphQL with Apollo Client

■ 19. makeVar + useReactiveVar

・cache.tsに管理したいstateの定義を記述
・Componentからcache.tsのstateを呼び出して、値の更新などを行う

■ 20. Integration of Nextjs/Apollo client with Hasura

・HasuraとNext.jsの連携をした
・連携の仕方は公式がサンプルを提供している
　→　githubのvercel/next.jsのnext.js/examples/with-apollo/lib/apolloClient.js
・SSGやSSRなどサーバサイド処理では必ず新規のApolloClientインスタンスを生成しなければならない
・types/generated/graphql.tsxのTypeには規則がある
　→　queryの末尾に「Query」をつけられるだけ
・ApolloClientのqueryは正規化される（キャッシュを取れるようにするため）
　